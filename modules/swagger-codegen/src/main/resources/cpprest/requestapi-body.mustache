/**
 * {{appName}}
 *
 * {{appDescription}}
 *
 * Version: {{version}}
 * Generated: {{generatedDate}}
 */

#include "{{classname}}.h"
#include <cpprest/http_client.h>
#include "HttpManager.h"
#include "RequestObject.h"

namespace swagger {
    namespace cpprest {
        namespace request {
            {{#operations}}
            namespace {{pathPrefix}} {
                {{#operation}}
                {{#customObject}}{{operation}}Request::{{operation}}{{/customObject}}Request(const utility::string_t& baseUrl, HttpManagerBase& httpManager) : RequestObject(baseUrl, httpManager)
                {

                }

                {{#customObject}}{{operation}}Request::~{{operation}}{{/customObject}}Request()
                {

                }

                {{#hasProduces}}{{#bodyParam}}{{^required}}void {{#customObject}}{{operation}}Request::{{execute}}{{/customObject}}(std::function<void(unsigned short, const model::{{#returnBaseType}}{{{returnBaseType}}}{{/returnBaseType}}{{^returnBaseType}}ModelObject{{/returnBaseType}}&)> callback)
                {
                    {{{dataType}}} {{paramName}};
                    {{#customObject}}{{execute}}{{/customObject}}({{paramName}}, callback);
                }
                {{/required}}{{/bodyParam}}{{/hasProduces}}
                void {{#customObject}}{{operation}}Request::{{execute}}{{/customObject}}({{#hasProduces}}{{#bodyParam}}{{{dataType}}} {{paramName}}, {{/bodyParam}}{{/hasProduces}}std::function<void(unsigned short, const model::{{#returnBaseType}}{{{returnBaseType}}}{{/returnBaseType}}{{^returnBaseType}}ModelObject{{/returnBaseType}}&)> callback)
                {
                    web::uri_builder uriBuilder;
                    uriBuilder.append_path(U("{{path}}"));
                    std::for_each(params_.begin(), params_.end(), [&](std::map<utility::string_t, utility::string_t>::value_type& pair) {
                        uriBuilder.append_query(pair.first, pair.second);
                    });
                    auto url = uriBuilder.to_string();
                    auto token = cancelToken_.get_token();

                    web::http::client::http_client httpClient(web::uri(baseUrl_), httpConfig_);
                    web::http::http_request request(web::http::methods::{{#customObject}}{{httpMethod}}{{/customObject}});
                    {{#hasConsumes}}request.headers().add(U("Accept"), U("{{#consumes}}{{^-first}}, {{/-first}}{{mediaType}}{{/consumes}}"));{{/hasConsumes}}
                    std::for_each(headers_.begin(), headers_.end(), [&](std::map<utility::string_t, utility::string_t>::value_type& pair) {
                        request.headers().add(pair.first, pair.second);
                    });

                    request.set_request_uri(url);
                    {{#hasProduces}}{{#bodyParam}}if ({{paramName}}.get()) {
                        request.set_body({{paramName}}->toJson());
                    }{{/bodyParam}}{{/hasProduces}}

                    auto t = httpClient.request(request, token).then([=](web::http::http_response response) {
                        statusCode_ = response.status_code();
                        if (response.headers().has(U("Content-Type"))) {
                            const utility::string_t contentType(response.headers()[U("Content-Type"]));
                            if (contentType == U("application/json")) {
                                pplx::task<void> t = response.extract_json().then([=](web::json::value jsonValue) {
                                    responseObject_.fromJson(jsonValue);
                                    callback(statusCode_, responseObject_);
                                }, token);
                                t.wait();
                            }
                        }
                    }).then([=](pplx::task<void> task) {
                        try {
                            task.get();
                            manager_.removeRequest(this);
                        } catch (const web::http::http_exception& e) {
                            callback(e.error_code().value(), responseObject_);
                            manager_.removeRequest(this);
                        } catch (const std::exception&) {
                            callback(500, responseObject_);
                            manager_.removeRequest(this);
                        }
                    });

                }
                {{/operation}}
            }
            {{/operations}}
        }
    }
}
