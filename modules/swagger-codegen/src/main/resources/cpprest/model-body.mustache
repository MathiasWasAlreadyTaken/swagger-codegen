/**
 * {{appName}}
 *
 * {{appDescription}}
 *
 * Version: {{version}}
 * Generated: {{generatedDate}}
 */

{{#models}}{{#model}}#include "{{classname}}.h"
#include <cpprest/http_client.h>


namespace swagger {
    namespace cpprest {
        namespace model {

            {{classname}}::{{classname}}() {

            }

            {{classname}}::~{{classname}}() {

            }

            web::json::value {{classname}}::toJson() const {
                web::json::value val;
                {{#vars}}{{#complexType}}{{#isContainer}}std::vector<web::json::value> {{name}}Array;
                std::for_each({{name}}_.begin(), {{name}}_.end(), [&]({{#items}}{{{datatype}}}{{/items}} obj) {
                    {{name}}Array.push_back({{#customObject}}{{#isString}}web::json::value::string(obj){{/isString}}{{#isObject}}obj->toJson(){{/isObject}}{{/customObject}});
                });
                if ({{name}}Array.size()) {
                    val[U("{{name}}")] = {{customObject.jsonValueType}}({{name}}Array);
                }{{/isContainer}}{{^isContainer}}val[U("{{name}}")] = {{^customObject.jsonValueType}}{{getter}}()->toJson({{/customObject.jsonValueType}}{{#customObject.jsonValueType}}{{customObject.jsonValueType}}({{getter}}(){{#customObject}}{{#isDateTime}}.to_string(utility::datetime::ISO_8601){{/isDateTime}}{{/customObject}}{{/customObject.jsonValueType}});{{/isContainer}}{{/complexType}}
                {{^complexType}}val[U("{{name}}")] = {{customObject.jsonValueType}}({{getter}}(){{#customObject}}{{#isDateTime}}.to_string(utility::datetime::ISO_8601){{/isDateTime}}{{/customObject}});
                {{/complexType}}{{/vars}}
                return val;
            }

            void {{classname}}::fromJson(web::json::value& json) {
                {{#vars}}
                if (!json[U("{{baseName}}")].is_null()) {
                    {{#customObject}}{{#isString}}if (json[U("{{baseName}}")].is_string()) {
                        {{setter}}(json[U("{{baseName}}")].as_string());
                    }{{/isString}}{{/customObject}}
                }
                {{/vars}}
            }

            {{#vars}}
            {{{datatype}}} {{classname}}::{{getter}}() const {
                return {{name}}_;
            }

            void {{classname}}::{{setter}}({{#complexType}}const {{/complexType}}{{{datatype}}}{{#complexType}}&{{/complexType}} {{name}}) {
                {{name}}_ = {{name}};
            }
            {{/vars}}
       } 
    }
}

{{/model}}
{{/models}}
